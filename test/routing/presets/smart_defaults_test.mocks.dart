// Mocks generated by Mockito 5.4.6 from annotations
// in flex_track/test/routing/presets/smart_defaults_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flex_track/src/models/event/base_event.dart' as _i3;
import 'package:flex_track/src/models/routing/event_category.dart' as _i8;
import 'package:flex_track/src/models/routing/routing_config.dart' as _i5;
import 'package:flex_track/src/models/routing/routing_rule.dart' as _i9;
import 'package:flex_track/src/models/routing/tracker_group.dart' as _i7;
import 'package:flex_track/src/routing/route_config_builder.dart' as _i4;
import 'package:flex_track/src/routing/routing_builder.dart' as _i2;
import 'package:flex_track/src/routing/routing_rule_builder.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRoutingBuilder_0 extends _i1.SmartFake
    implements _i2.RoutingBuilder {
  _FakeRoutingBuilder_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteConfigBuilder_1<T1 extends _i3.BaseEvent> extends _i1.SmartFake
    implements _i4.RouteConfigBuilder<T1> {
  _FakeRouteConfigBuilder_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingConfiguration_2 extends _i1.SmartFake
    implements _i5.RoutingConfiguration {
  _FakeRoutingConfiguration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingRuleBuilder_3 extends _i1.SmartFake
    implements _i6.RoutingRuleBuilder {
  _FakeRoutingRuleBuilder_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RoutingBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutingBuilder extends _i1.Mock implements _i2.RoutingBuilder {
  @override
  _i2.RoutingBuilder defineGroup(
    String? name,
    List<String>? trackerIds, {
    String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #defineGroup,
          [
            name,
            trackerIds,
          ],
          {#description: description},
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #defineGroup,
            [
              name,
              trackerIds,
            ],
            {#description: description},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #defineGroup,
            [
              name,
              trackerIds,
            ],
            {#description: description},
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder defineCategory(
    String? name, {
    String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #defineCategory,
          [name],
          {#description: description},
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #defineCategory,
            [name],
            {#description: description},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #defineCategory,
            [name],
            {#description: description},
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder setDefaultGroup(_i7.TrackerGroup? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaultGroup,
          [group],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setDefaultGroup,
            [group],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setDefaultGroup,
            [group],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder setDefaultGroupNamed(String? groupName) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaultGroupNamed,
          [groupName],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setDefaultGroupNamed,
            [groupName],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setDefaultGroupNamed,
            [groupName],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder setSampling(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setSampling,
          [enabled],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setSampling,
            [enabled],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setSampling,
            [enabled],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder setConsentChecking(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setConsentChecking,
          [enabled],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setConsentChecking,
            [enabled],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setConsentChecking,
            [enabled],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder setDebugMode(bool? isDebug) => (super.noSuchMethod(
        Invocation.method(
          #setDebugMode,
          [isDebug],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setDebugMode,
            [isDebug],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #setDebugMode,
            [isDebug],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i4.RouteConfigBuilder<T> route<T extends _i3.BaseEvent>() =>
      (super.noSuchMethod(
        Invocation.method(
          #route,
          [],
        ),
        returnValue: _FakeRouteConfigBuilder_1<T>(
          this,
          Invocation.method(
            #route,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<T>(
          this,
          Invocation.method(
            #route,
            [],
          ),
        ),
      ) as _i4.RouteConfigBuilder<T>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeNamed(String? pattern) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeNamed,
          [pattern],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeNamed,
            [pattern],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeNamed,
            [pattern],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeMatching(RegExp? pattern) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeMatching,
          [pattern],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeMatching,
            [pattern],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeMatching,
            [pattern],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeExact(String? eventName) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeExact,
          [eventName],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeExact,
            [eventName],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeExact,
            [eventName],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeCategory(
          _i8.EventCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeCategory,
          [category],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeCategory,
            [category],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeCategory,
            [category],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeCategoryNamed(
          String? categoryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeCategoryNamed,
          [categoryName],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeCategoryNamed,
            [categoryName],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeCategoryNamed,
            [categoryName],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeWithProperty(
    String? propertyName, [
    dynamic value,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeWithProperty,
          [
            propertyName,
            value,
          ],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeWithProperty,
            [
              propertyName,
              value,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeWithProperty,
            [
              propertyName,
              value,
            ],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routePII() => (super.noSuchMethod(
        Invocation.method(
          #routePII,
          [],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routePII,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routePII,
            [],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeHighVolume() =>
      (super.noSuchMethod(
        Invocation.method(
          #routeHighVolume,
          [],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeHighVolume,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeHighVolume,
            [],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeEssential() => (super.noSuchMethod(
        Invocation.method(
          #routeEssential,
          [],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeEssential,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeEssential,
            [],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> routeDefault() => (super.noSuchMethod(
        Invocation.method(
          #routeDefault,
          [],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeDefault,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #routeDefault,
            [],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i2.RoutingBuilder applySmartDefaults() => (super.noSuchMethod(
        Invocation.method(
          #applySmartDefaults,
          [],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #applySmartDefaults,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #applySmartDefaults,
            [],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder addRules(List<_i9.RoutingRule>? rules) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRules,
          [rules],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #addRules,
            [rules],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #addRules,
            [rules],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  void addRule(_i9.RoutingRule? rule) => super.noSuchMethod(
        Invocation.method(
          #addRule,
          [rule],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RoutingBuilder clearRules() => (super.noSuchMethod(
        Invocation.method(
          #clearRules,
          [],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #clearRules,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #clearRules,
            [],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i2.RoutingBuilder removeRulesWhere(bool Function(_i9.RoutingRule)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeRulesWhere,
          [test],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #removeRulesWhere,
            [test],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #removeRulesWhere,
            [test],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i7.TrackerGroup? getGroup(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getGroup,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i7.TrackerGroup?);

  @override
  _i8.EventCategory? getCategory(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i8.EventCategory?);

  @override
  List<_i7.TrackerGroup> getAllGroups() => (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
        ),
        returnValue: <_i7.TrackerGroup>[],
        returnValueForMissingStub: <_i7.TrackerGroup>[],
      ) as List<_i7.TrackerGroup>);

  @override
  List<_i8.EventCategory> getAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: <_i8.EventCategory>[],
        returnValueForMissingStub: <_i8.EventCategory>[],
      ) as List<_i8.EventCategory>);

  @override
  _i5.RoutingConfiguration build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeRoutingConfiguration_2(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingConfiguration_2(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i5.RoutingConfiguration);

  @override
  List<String> validate() => (super.noSuchMethod(
        Invocation.method(
          #validate,
          [],
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  Map<String, dynamic> getDebugInfo() => (super.noSuchMethod(
        Invocation.method(
          #getDebugInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [RouteConfigBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteConfigBuilder<T extends _i3.BaseEvent> extends _i1.Mock
    implements _i4.RouteConfigBuilder<T> {
  @override
  bool get isDefault => (super.noSuchMethod(
        Invocation.getter(#isDefault),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.RoutingBuilder get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i6.RoutingRuleBuilder toAll() => (super.noSuchMethod(
        Invocation.method(
          #toAll,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toAll,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toAll,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder to(List<String>? trackerIds) => (super.noSuchMethod(
        Invocation.method(
          #to,
          [trackerIds],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #to,
            [trackerIds],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #to,
            [trackerIds],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder toGroup(_i7.TrackerGroup? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #toGroup,
          [group],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toGroup,
            [group],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toGroup,
            [group],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder toGroupNamed(String? groupName) => (super.noSuchMethod(
        Invocation.method(
          #toGroupNamed,
          [groupName],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toGroupNamed,
            [groupName],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toGroupNamed,
            [groupName],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder toDevelopment() => (super.noSuchMethod(
        Invocation.method(
          #toDevelopment,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toDevelopment,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toDevelopment,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder everywhere() => (super.noSuchMethod(
        Invocation.method(
          #everywhere,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #everywhere,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #everywhere,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder debugOnly() => (super.noSuchMethod(
        Invocation.method(
          #debugOnly,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #debugOnly,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #debugOnly,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder toTracker(String? trackerId) => (super.noSuchMethod(
        Invocation.method(
          #toTracker,
          [trackerId],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toTracker,
            [trackerId],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #toTracker,
            [trackerId],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);
}

/// A class which mocks [RoutingRuleBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutingRuleBuilder extends _i1.Mock
    implements _i6.RoutingRuleBuilder {
  @override
  _i6.RoutingRuleBuilder sample(double? rate) => (super.noSuchMethod(
        Invocation.method(
          #sample,
          [rate],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #sample,
            [rate],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #sample,
            [rate],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder requireConsent() => (super.noSuchMethod(
        Invocation.method(
          #requireConsent,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #requireConsent,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #requireConsent,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder skipConsent() => (super.noSuchMethod(
        Invocation.method(
          #skipConsent,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #skipConsent,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #skipConsent,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder onlyInDebug() => (super.noSuchMethod(
        Invocation.method(
          #onlyInDebug,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #onlyInDebug,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #onlyInDebug,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder onlyInProduction() => (super.noSuchMethod(
        Invocation.method(
          #onlyInProduction,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #onlyInProduction,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #onlyInProduction,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder requirePIIConsent() => (super.noSuchMethod(
        Invocation.method(
          #requirePIIConsent,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #requirePIIConsent,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #requirePIIConsent,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder withPriority(int? priority) => (super.noSuchMethod(
        Invocation.method(
          #withPriority,
          [priority],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #withPriority,
            [priority],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #withPriority,
            [priority],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder withDescription(String? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #withDescription,
          [description],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #withDescription,
            [description],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #withDescription,
            [description],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder withId(String? id) => (super.noSuchMethod(
        Invocation.method(
          #withId,
          [id],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #withId,
            [id],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #withId,
            [id],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder heavySampling() => (super.noSuchMethod(
        Invocation.method(
          #heavySampling,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #heavySampling,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #heavySampling,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder lightSampling() => (super.noSuchMethod(
        Invocation.method(
          #lightSampling,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #lightSampling,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #lightSampling,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder mediumSampling() => (super.noSuchMethod(
        Invocation.method(
          #mediumSampling,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #mediumSampling,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #mediumSampling,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder noSampling() => (super.noSuchMethod(
        Invocation.method(
          #noSampling,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #noSampling,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #noSampling,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder highPriority() => (super.noSuchMethod(
        Invocation.method(
          #highPriority,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #highPriority,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #highPriority,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder lowPriority() => (super.noSuchMethod(
        Invocation.method(
          #lowPriority,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #lowPriority,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #lowPriority,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i6.RoutingRuleBuilder essential() => (super.noSuchMethod(
        Invocation.method(
          #essential,
          [],
        ),
        returnValue: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #essential,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingRuleBuilder_3(
          this,
          Invocation.method(
            #essential,
            [],
          ),
        ),
      ) as _i6.RoutingRuleBuilder);

  @override
  _i2.RoutingBuilder and() => (super.noSuchMethod(
        Invocation.method(
          #and,
          [],
        ),
        returnValue: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #and,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRoutingBuilder_0(
          this,
          Invocation.method(
            #and,
            [],
          ),
        ),
      ) as _i2.RoutingBuilder);

  @override
  _i4.RouteConfigBuilder<T> andRoute<T extends _i3.BaseEvent>() =>
      (super.noSuchMethod(
        Invocation.method(
          #andRoute,
          [],
        ),
        returnValue: _FakeRouteConfigBuilder_1<T>(
          this,
          Invocation.method(
            #andRoute,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<T>(
          this,
          Invocation.method(
            #andRoute,
            [],
          ),
        ),
      ) as _i4.RouteConfigBuilder<T>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> andRouteNamed(String? pattern) =>
      (super.noSuchMethod(
        Invocation.method(
          #andRouteNamed,
          [pattern],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #andRouteNamed,
            [pattern],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #andRouteNamed,
            [pattern],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> andRouteMatching(RegExp? pattern) =>
      (super.noSuchMethod(
        Invocation.method(
          #andRouteMatching,
          [pattern],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #andRouteMatching,
            [pattern],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #andRouteMatching,
            [pattern],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);

  @override
  _i4.RouteConfigBuilder<_i3.BaseEvent> andRouteDefault() =>
      (super.noSuchMethod(
        Invocation.method(
          #andRouteDefault,
          [],
        ),
        returnValue: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #andRouteDefault,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteConfigBuilder_1<_i3.BaseEvent>(
          this,
          Invocation.method(
            #andRouteDefault,
            [],
          ),
        ),
      ) as _i4.RouteConfigBuilder<_i3.BaseEvent>);
}
