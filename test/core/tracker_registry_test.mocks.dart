// Mocks generated by Mockito 5.4.6 from annotations
// in flex_track/test/core/tracker_registry_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flex_track/src/models/event/base_event.dart' as _i5;
import 'package:flex_track/src/strategies/tracker_strategy.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TrackerStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrackerStrategy extends _i1.Mock implements _i2.TrackerStrategy {
  MockTrackerStrategy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isGDPRCompliant => (super.noSuchMethod(
        Invocation.getter(#isGDPRCompliant),
        returnValue: false,
      ) as bool);

  @override
  bool get supportsRealTime => (super.noSuchMethod(
        Invocation.getter(#supportsRealTime),
        returnValue: false,
      ) as bool);

  @override
  int get maxBatchSize => (super.noSuchMethod(
        Invocation.getter(#maxBatchSize),
        returnValue: 0,
      ) as int);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> track(_i5.BaseEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #track,
          [event],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackBatch(List<_i5.BaseEvent>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackBatch,
          [events],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void enable() => super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disable() => super.noSuchMethod(
        Invocation.method(
          #disable,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> setUserProperties(Map<String, dynamic>? properties) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserProperties,
          [properties],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> identifyUser(
    String? userId, [
    Map<String, dynamic>? properties,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #identifyUser,
          [
            userId,
            properties,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  Map<String, dynamic> getDebugInfo() => (super.noSuchMethod(
        Invocation.method(
          #getDebugInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
