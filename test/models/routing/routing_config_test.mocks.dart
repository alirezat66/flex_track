// Mocks generated by Mockito 5.4.6 from annotations
// in flex_track/test/models/routing/routing_config_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flex_track/src/models/event/base_event.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseEvent extends _i1.Mock implements _i2.BaseEvent {
  MockBaseEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get containsPII => (super.noSuchMethod(
        Invocation.getter(#containsPII),
        returnValue: false,
      ) as bool);

  @override
  bool get requiresConsent => (super.noSuchMethod(
        Invocation.getter(#requiresConsent),
        returnValue: false,
      ) as bool);

  @override
  bool get isHighVolume => (super.noSuchMethod(
        Invocation.getter(#isHighVolume),
        returnValue: false,
      ) as bool);

  @override
  bool get isEssential => (super.noSuchMethod(
        Invocation.getter(#isEssential),
        returnValue: false,
      ) as bool);

  @override
  DateTime get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#timestamp),
        ),
      ) as DateTime);

  @override
  String get name => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #getName,
            [],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
